Compare to tinyusb/examples/device/hid_composite/src/ directory.

diff -u -w /Users/vak/Project/Pico/tinyusb/examples/device/hid_composite/src/main.c ./main.c
--- /Users/vak/Project/Pico/tinyusb/examples/device/hid_composite/src/main.c	2023-11-17 01:12:01
+++ ./main.c	2023-11-17 00:50:02
@@ -27,7 +27,7 @@
 #include <stdio.h>
 #include <string.h>

-#include "bsp/board_api.h"
+#include "bsp/board.h"
 #include "tusb.h"

 #include "usb_descriptors.h"
@@ -56,14 +56,8 @@
 int main(void)
 {
   board_init();
+  tusb_init();

-  // init device stack on configured roothub port
-  tud_init(BOARD_TUD_RHPORT);
-
-  if (board_init_after_tusb) {
-    board_init_after_tusb();
-  }
-
   while (1)
   {
     tud_task(); // tinyusb device task
@@ -101,7 +95,7 @@
 // Invoked when usb bus is resumed
 void tud_resume_cb(void)
 {
-  blink_interval_ms = tud_mounted() ? BLINK_MOUNTED : BLINK_NOT_MOUNTED;
+  blink_interval_ms = BLINK_MOUNTED;
 }

 //--------------------------------------------------------------------+
@@ -232,7 +226,7 @@
   (void) instance;
   (void) len;

-  uint8_t next_report_id = report[0] + 1u;
+  uint8_t next_report_id = report[0] + 1;

   if (next_report_id < REPORT_ID_COUNT)
   {
Only in .: tinyusb.diff
diff -u -w /Users/vak/Project/Pico/tinyusb/examples/device/hid_composite/src/tusb_config.h ./tusb_config.h
--- /Users/vak/Project/Pico/tinyusb/examples/device/hid_composite/src/tusb_config.h	2023-11-17 01:12:01
+++ ./tusb_config.h	2022-05-20 21:56:26
@@ -30,42 +30,46 @@
  extern "C" {
 #endif

-//--------------------------------------------------------------------+
-// Board Specific Configuration
-//--------------------------------------------------------------------+
-
-// RHPort number used for device can be defined by board.mk, default to port 0
-#ifndef BOARD_TUD_RHPORT
-#define BOARD_TUD_RHPORT      0
-#endif
-
-// RHPort max operational speed can defined by board.mk
-#ifndef BOARD_TUD_MAX_SPEED
-#define BOARD_TUD_MAX_SPEED   OPT_MODE_DEFAULT_SPEED
-#endif
-
 //--------------------------------------------------------------------
 // COMMON CONFIGURATION
 //--------------------------------------------------------------------

-// defined by compiler flags for flexibility
+// defined by board.mk
 #ifndef CFG_TUSB_MCU
 #error CFG_TUSB_MCU must be defined
 #endif

-#ifndef CFG_TUSB_OS
-#define CFG_TUSB_OS           OPT_OS_NONE
+// RHPort number used for device can be defined by board.mk, default to port 0
+#ifndef BOARD_DEVICE_RHPORT_NUM
+  #define BOARD_DEVICE_RHPORT_NUM     0
 #endif

-#ifndef CFG_TUSB_DEBUG
-#define CFG_TUSB_DEBUG        0
+// RHPort max operational speed can defined by board.mk
+// Default to Highspeed for MCU with internal HighSpeed PHY (can be port specific), otherwise FullSpeed
+#ifndef BOARD_DEVICE_RHPORT_SPEED
+  #if (CFG_TUSB_MCU == OPT_MCU_LPC18XX || CFG_TUSB_MCU == OPT_MCU_LPC43XX || CFG_TUSB_MCU == OPT_MCU_MIMXRT10XX || \
+       CFG_TUSB_MCU == OPT_MCU_NUC505  || CFG_TUSB_MCU == OPT_MCU_CXD56 || CFG_TUSB_MCU == OPT_MCU_SAMX7X)
+    #define BOARD_DEVICE_RHPORT_SPEED   OPT_MODE_HIGH_SPEED
+  #else
+    #define BOARD_DEVICE_RHPORT_SPEED   OPT_MODE_FULL_SPEED
   #endif
+#endif

-// Enable Device stack
-#define CFG_TUD_ENABLED       1
+// Device mode with rhport and speed defined by board.mk
+#if   BOARD_DEVICE_RHPORT_NUM == 0
+  #define CFG_TUSB_RHPORT0_MODE     (OPT_MODE_DEVICE | BOARD_DEVICE_RHPORT_SPEED)
+#elif BOARD_DEVICE_RHPORT_NUM == 1
+  #define CFG_TUSB_RHPORT1_MODE     (OPT_MODE_DEVICE | BOARD_DEVICE_RHPORT_SPEED)
+#else
+  #error "Incorrect RHPort configuration"
+#endif

-// Default is max speed that hardware controller could support with on-chip PHY
-#define CFG_TUD_MAX_SPEED     BOARD_TUD_MAX_SPEED
+#ifndef CFG_TUSB_OS
+#define CFG_TUSB_OS               OPT_OS_NONE
+#endif
+
+// CFG_TUSB_DEBUG is defined by compiler in DEBUG build
+// #define CFG_TUSB_DEBUG           0

 /* USB DMA on some MCUs can only access a specific SRAM region with restriction on alignment.
  * Tinyusb use follows macros to declare transferring memory so that they can be put
diff -u -w /Users/vak/Project/Pico/tinyusb/examples/device/hid_composite/src/usb_descriptors.c ./usb_descriptors.c
--- /Users/vak/Project/Pico/tinyusb/examples/device/hid_composite/src/usb_descriptors.c	2023-11-17 01:12:01
+++ ./usb_descriptors.c	2023-11-17 00:50:02
@@ -23,7 +23,7 @@
  *
  */

-#include "bsp/board_api.h"
+#include "pico/unique_id.h"
 #include "tusb.h"
 #include "usb_descriptors.h"

@@ -178,13 +178,8 @@
 // String Descriptors
 //--------------------------------------------------------------------+

-// String Descriptor Index
-enum {
-  STRID_LANGID = 0,
-  STRID_MANUFACTURER,
-  STRID_PRODUCT,
-  STRID_SERIAL,
-};
+// buffer to hold flash ID
+char serial[2 * PICO_UNIQUE_BOARD_ID_SIZE_BYTES + 1];

 // array of pointer to string descriptors
 char const* string_desc_arr [] =
@@ -192,49 +187,47 @@
   (const char[]) { 0x09, 0x04 }, // 0: is supported language is English (0x0409)
   "TinyUSB",                     // 1: Manufacturer
   "TinyUSB Device",              // 2: Product
-  NULL,                          // 3: Serials will use unique ID if possible
+  serial,                        // 3: Serials, uses the flash ID
 };

-static uint16_t _desc_str[32 + 1];
+static uint16_t _desc_str[32];

 // Invoked when received GET STRING DESCRIPTOR request
 // Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
-uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
+uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
+{
   (void) langid;
-  size_t chr_count;

-  switch ( index ) {
-    case STRID_LANGID:
+  uint8_t chr_count;
+
+  if ( index == 0)
+  {
       memcpy(&_desc_str[1], string_desc_arr[0], 2);
       chr_count = 1;
-      break;
-
-    case STRID_SERIAL:
-      chr_count = board_usb_get_serial(_desc_str + 1, 32);
-      break;
-
-    default:
+  }else
+  {
     // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
     // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

+    if (index == 3) pico_get_unique_board_id_string(serial, sizeof(serial));
+
       if ( !(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])) ) return NULL;

       const char *str = string_desc_arr[index];

       // Cap at max char
       chr_count = strlen(str);
-      size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
-      if ( chr_count > max_count ) chr_count = max_count;
+    if ( chr_count > 31 ) chr_count = 31;

       // Convert ASCII string into UTF-16
-      for ( size_t i = 0; i < chr_count; i++ ) {
+    for(uint8_t i=0; i<chr_count; i++)
+    {
         _desc_str[1 + i] = str[i];
       }
-      break;
   }

   // first byte is length (including header), second byte is string type
-  _desc_str[0] = (uint16_t) ((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
+  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);

   return _desc_str;
 }
