# -*- LE-syntax -*-
# Syntax patterns for LE editor. (c) 1997-2008 Alexander V. Lukyanov
# This file is distributed under GNU GPL license.
# Please send corrections and improvements to <lav@yars.free.net>
#
# $Id: syntax,v 1.55 2013/01/31 08:02:47 lav Exp $
#
# This file describes how to highlight syntax. The following format
# used:
# /PATTERN - selects file names for which next lines apply
# c[i]COLOR[,MASK]=REGEXP - use COLOR (1-3) to highlight subexpressions
# of REGEXP; MASK is bitmask selecting which subexpressions are to
# highlight, 0 (default) means the whole patterm.
# C escapes can be used in REGEXP. It can also be split into several lines
# by trailing \ on the line, spaces after such a split are ignored.
# The optional `i' means to ignore case.

# c1 usually marks keywords
# c2 usually marks important syntax elements
# c3 usually marks comments or text strings
# c4 usually marks preprocessor directives
# c5
# c6

# i=file includes specified file from PKGDATADIR/syntax.d/file
#	(useful for large descriptions or common patterns)
# s[i](file)[MASK]=REGEXP uses patterns in the file to color matched substring(s)

# maximum height of constructs (above and below the screen)
h20

# This file mode
//-\*- *LE-syntax *-\*-
c3=^#.*$
c1,1=^(h|ci?|i)[0-9]?(?:,[0-9]+)?=
c2,1=^(?:h|ci?|i)[0-9]?(?:,[0-9]+)?(=)
c1,1=^(si?)\\([^\n]+\\)[0-9]*=
c2,7=^si?(\\()[^\n]+(\\))[0-9]*(=)
c2=^/

# C language mode (lav)
/*.c|*.b|*.td|*.y|*.l|*.ino|/-\*- *c *-\*-
i=c-comment
i=cpp
i=c-literal
c1,2=([^[:alnum:]_]|^)(asm|else|if|switch|case|while|for|goto|break\
 |continue|char|short|int|long|unsigned|signed|auto\
 |const|default|do|double|enum|extern|float|register\
 |return|sizeof|static|struct|typedef|union|void|volatile\
)([^[:alnum:]_]|$)
c2=\\[|\\]|\\(|\\)|{|}|,

# C++ mode (lav)
/*.cc|*.C|*.cpp|*.h|*.hh|*.hpp|*.H|*.pde|/-\*- *c\+\+ *-\*-
i=c++-comment
i=cpp
i=c-literal
c1,2=([^[:alnum:]_]|^)(asm|else|if|switch|case|while|for|goto|break\
 |continue|char|short|int|long|unsigned|signed|auto\
 |const|default|do|double|enum|extern|float|register\
 |return|sizeof|static|struct|typedef|union|void|volatile\
 |try|catch|class|new|delete|private|public|protected|this|virtual\
 |inline|bool|true|false|operator|overload|template|friend|namespace|using\
 |typeid|dynamic_cast|const_cast|static_cast|reinterpret_cast|typename|explicit\
)([^[:alnum:]_]|$)
c2=\\[|\\]|\\(|\\)|{|}|,

# Go mode (vak)
/*.go|*.gy|*.go-|/-\*- *go *-\*-
c3=//.*$|/\\*(?:.|\n)*?\\*/
c4,1=^[ \t]*(#[ \t]*(?:assert|define|elif|else|endif|error|ident|if|ifdef\
	|ifndef|import|include|include_next|line|pragma|sccs|unassert|undef)\b)
c4,1=^[ \t]*(#)
c3,1=^[ \t]*#[ \t]*include(?:_next)?[ \t]*(<[^>\n]*>|"[^"\n]*")
c6="([^"\n\\]|\\\\(.|\n))*"|'([^'\n\\]|\\\\.)*'
c6=`[^`]*`
c4=(0[0-7]*)|([1-9][0-9]*)|(0x[0-9a-fA-F]+)
c1,2=([^[:alnum:]_]|^)(append|bool|break|byte|cap|case|chan|close|complex\
|complex128|complex64|const|continue|copy|default|defer|delete|else|error\
|fallthrough|false|float32|float64|for|func|go|goto|if|imag|import|int|int16\
|int32|int64|int8|interface|iota|len|make|map|new|nil|package|panic|print\
|println|range|real|recover|return|rune|select|string|struct|switch|true\
|type|uint|uint16|uint32|uint64|uint8|uintptr|var\
)([^[:alnum:]_]|$)
c2=\\[|\\]|\\(|\\)|{|}|,|:=|&&|&|\|\||==|!=|\*

# Rust mode (vak)
/*.rs|/-\*- *rust *-\*-
i=c++-comment
i=cpp
c4="([^"\n\\]|\\\\(.|\n))*"
c6='([^'\n\\]|\\\\.)*'
c4=`[^`]*`
c5,2=([^[:alnum:]_])((0[xX][[:xdigit:]]+)|([0-9]+))
c1,2=([^[:alnum:]_]|^)(match|if|else|for|loop|while|type|struct|enum|union\
|as|break|box|continue|extern|fn|in|impl|let|macro|pub|return|yield|super\
|where|unsafe|use|mod|trait|move|mut|ref|static|const\
)([^[:alnum:]_]|$)
c2=\\[|\\]|\\(|\\)|{|}|,|::

# named.conf mode (lav)
/named.conf|/-\*- *(named|bind) *-\*-
i=named-conf

/logrotate.conf|/-\*- *logrotate *-\*-
i=logrotate-conf

# nroff mode (lav)
/*.[1-9]|/-\*- *nroff *-\*-
c3=^\.\\\\".*$
c2=^\.[[:alpha:]]*
c1,1=\\\\fB((\\\\[^f]|[^\\])*[^\\]?)(\\\\f|$)
c3,1=\\\\fI((\\\\[^f]|[^\\])*[^\\]?)(\\\\f|$)
c1,1=^\.B[IR]? (.*)$
c3,1=^\.I (.*)$

/*.e
i=eiffel

/*.adb|*.ads|*.adc|*.gpr
i=ada

/*.S|*.s|*.gs
i=c++-comment
i=as

/*.py|/#!/usr/bin/python
i=python

/*.sa
i=sather

/*.sh|*.csh|*.environ|.bashrc|.cshrc|.profile|/^#![ \t]*/.*/(ba|z|k|tc)?sh|-\*- *sh *-\*-
i=shell

/*.java|/-\*- *java *-\*-
i=java

/*.js|/-\*- *javascript *-\*-
i=javascript

# JSON mode (vak)
/*.json
c3="([^"\n\\]|\\\\(.|\n))*" *:
c0="([^"\n\\]|\\\\(.|\n))*"
c4='([^'\n\\]|\\\\.)*'
c5,2=([^[:alnum:]_])((0[xX][[:xdigit:]]+)|([0-9]+))
c2=\\[|\\]|\\(|\\)|{|}|,

# po (i18n) mode (lav)
/*.po|*.pot
c1=^#, .*
c2="|\\\\n|%[+- #]*[0-9*]*\\.?[0-9*]*l?[l]?[diouxXfeEgGcs]
c3=^#.*$

/*.lout
i=lout

/*.awk
i=awk

/*.gma|*.gema|/^#![ \t]*/.*/\gema
i=gema

/*.p[lm]|*.dpl|/^#![ \t]*/.*/\perl|-\*- *perl *-\*-
i=perl

/*.sql|*.buf|/-\*- *[sS][qQ][lL] *-\*-
i=sql

/*.mib|*.smi
i=snmp-mib

/*.texi|-\*- *texinfo *-\*-
i=texinfo

/*.tex
i=tex

/*.php.*|*.php|/<\?php
s(php)1=<\?(?:php)?((?:.|\n)*?)\?>
s(html)1=(?:\`|\?>)((?:.|\n)*?)(?:<\?|\`)
i=html
i=php

/*.html|*.htm|*.shtml|/-\*- *html *-\*-|^<![Dd][Oo][Cc][Tt][Yy][Pp][Ee] [Hh][Tt][Mm][Ll]|^<[Hh][Tt][Mm][Ll]>
i=html

/*.tcl|*.xdc|/^#![ \t]*/.*/tcl|-\*- *tcl *-\*-
i=tcl

/*.expect|/^#![ \t]*/usr/bin/expect
i=tcl

/*.mf|*.mp
i=metafont

# Patch mode, by Serge Vakulenko <vak@cronyx.ru>
/*.pch|*.diff|*.patch|/^diff
c2=^\+\+.*$
c2=^--.*$
c2=^@@.*$
c3=^\+.*$
c1=^-.*$
c5=^diff --.*$

# Generic configuration files, by Serge Vakulenko <vak@cronyx.ru>
/*.conf|*.cf|*.cfg|*.ini|*.pic32|Config*|*.list
c3=[#;].*$
c3=--.*$
c2=:|\$|->|=
c2,1=^(\[)[^\]]+\]
c2,1=^\[[^\]]+(\])
c1,1=^\[([^\]]+)\]
c5="[^"]+?"
c5='[^']+?'

# CMake files, by Serge Vakulenko <vak@cronyx.ru>
/CMakeLists.txt
c3=#.*$
c2=\(|\)|\${|}
c5="[^"]+?"
c1,2=([^[:alnum:]_]|^)(project|message\
 |cmake_minimum_required|set|if|else|elseif|endif|find_path|find_library|find_program|add_definitions\
 |include_directories|add_executable|target_link_libraries|include|cmake_policy\
 |execute_process|foreach|endforeach|add_test|add_library|set_tests_properties\
)([^[:alnum:]_]|$)

/[Mm]akefile|[Mm]akefile-*|*.mk|*.rules|*.defs|*.diag|/^#![ \t]*/.*/make|-\*-.*makefile[^\w]
i=make-file

/*.v|*.mv|*.vh|*.v.prpl|*.hook|/-\*- *verilog *-\*-
i=verilog

/*.sv|/-\*- *systemverilog *-\*-
i=systemverilog

/*.vhd|*.vhdl|/-\*- *vhdl *-\*-
i=vhdl

# PMK files, by Serge Vakulenko <vak@cronyx.ru>
/*.pmk
c3=[;].*$
c5=F|K|К
c1,2=(\W)([0-9]+:)
#c2,1=^(\[)[^\]]+\]
#c2,1=^\[[^\]]+(\])
#c1,1=^\[([^\]]+)\]

# Asylog mode, by Serge Vakulenko <serge@vak.ru>
/*.av|/-\*- *asylog *-\*-
c6="([^"\n\\]|\\\\(.|\n))*"
c3,1=`[ \t]*(include[ \t]*"[^"\n]*"|define*|ifdef*|ifndef*|else*|endif*)
i=c++-comment
c3=\(\\*(?:.|\n)*?\\*\)
c1,2=([^[:alnum:]_]|^)(always|begin|case|default|else|end|endcase|endmodule\
|endselect|for|forever|fork|if|input|integer|join|logic|master|module\
|output|parameter|repeat|select|$signed|signed|slave|sync|$unsigned|while\
)([^[:alnum:]_]|$)
c2=\\[|\\]|\\(|\\)|{|}|,|@|<=|:|;|->|#
c4,2=([^[:alnum:]_])('(0|1|d*[0-9]+|h[[:xdigit:]]+|o[0-7]+|b[01]+))
c4,2=([^[:alnum:]_])([0-9]+('d*[0-9]+|'h[[:xdigit:]]+|'o[0-7]+|'b[01]+|))
c5=#[^ ]*
c1==

# Debian control file mode, by Raphael Geissert <atomo64@gmail.com>
#/control|/^Source:
//^Source:
c3=^#.*$
ci2,1=^[[:alnum:]-]+(:)
c2=\$|=|<|>|\||,
c2=^ \.
c1,1=^(Source|Package(-List)?|Version|Section|Priority|Maintainer|Homepage|Description\
 |Standards-Version|(Build-)?Depends(-Indep)?|Architecture|Provides|Replaces\
 |Recommends|Suggests|(Build-)?Conflicts(-Indep)?|Breaks|Enhances|Uploaders|Vcs-Browser\
 |Essential|Installed-Size|Binary|Format|Files|Closes|Changes|Urgency\
 |Distribution|Date|Changed-By|Checksums-Sha(1|256))
ci1=^Vcs-[[:alnum:]]+
c1,1=^(X[BCS]+-[[:alnum:]-]+)(:)

# Debian changelog mode, by Raphael Geissert <atomo64@gmail.com>
// ([^ ]+) .+; +urgency=
c3=^[ \t]+--.+
c2,1=urgency=([[:alnum:]]+)
ci2,1=[ \t]+([[:alnum:]-]+);[ \t]+urgency=
c2,1=^[[:alnum:].-]+ +\((.+)\)
c1,1=^([[:alnum:].-]+) +\(.+\)
ci1=closes:[ \t]*(bug)?#?[ \t]?[0-9]+(,[ \t]*\
 (bug)?\#?[ \t]?[0-9]+)*
c1=LP:[ \t]+#[0-9]+
c2,1=(\[).+\]
c2,1=\[.+(\])
c3,1=\[(.+)\]
c1=^[ \t]+[*+-][^-]
c3="[^"]+?"
c3,1=\W('[^']+?')\W

# simple, and imperfect, changelog mode, by Raphael Geissert <atomo64@gmail.com>
/ChangeLog|/^[0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2,4\}[ \t]
c3=^[0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2,4\}[ \t]+
c2,3=^[0-9]\{2,4\}-[0-9]\{2\}-[0-9]\{2,4\}.*  ([[:alnum:]]+)$

# lsm mode, by Raphael Geissert <atomo64@gmail.com>
/*.lsm|/^Begin[34]
c3=^(Begin[34]|End)
ci2,1=^[[:alnum:]-]+(:)
#c1,1=^([^ \t]*):
c1,1=^(Title|Version|Entered-date|Description|Keywords|Author|Maintained-by\
 |(Primary|Alternate|Original)-site|Platforms|Copying-policy):
c2=[@()]

# really basic m4 and ac modes, by Raphael Geissert <atomo64@gmail.com>
/*.ac|/-\*- *autoconf *-\*-
c3,2=(^|[^[:alnum:]_])dnl([^[:alnum:]_\n].*)?$
c1,2=(^|[^[:alnum:]_])(A[CM]_[[:alnum:]_]+)
c2=:|=|>|<|,|\||\[|\]|\(|\)|{|}|&
c3="|'
i=shell

/*.m4
c3=^[ \t]*#.*$
c2=:|\$|[+-:]?=|>|<|`|\||\[|\]|\(|\)|{|}|&
c1,2=(^|[^[:alnum:]_])(m4_[[:alnum:]_]+)
c3="|'

# watch file mode, by Raphael Geissert <atomo64@gmail.com>
/watch|/version=[23]
c3=^[ \t]*#.*
c2=[ \t]*version=[0-9]
c1,1=^[ \t]*(opt(ion)?s)
c1=(downloadurl|[du]?version|filename)mangle
c1=active|passive|pasv
c2=,
c2,1=[^\\](\.)[^/]+[ \n\t]
c3=\(.+\)

# .gdbinit mode, by Raphael Geissert <atomo64@gmail.com>
/gdbinit|.*gdbinit
c1,1=^(define|end|document)([^[:alnum:]_]|$)
c2,3=^[[:alnum:]][^ \t]+[ \t]+([[:alnum:]_]+)$

# series (quilt) mode, by Raphael Geissert <atomo64@gmail.com>
/series
c3=^[ \t]*#.*

# .desktop files mode, by Raphael Geissert <atomo64@gmail.com>
/*.desktop|*eventsrc
c2,1=(\[).+\]
c2,1=\[.+(\])
c3,1=\[(.+)\]
c3=^[ \t]*#.*
c1,1=^((Generic)?Name|Comment|(Try)?Exec|Icon|X-[a-zA-Z0-9-]+|Type|Categories\
 |Version|NoDisplay|Hidden|(Only|Not)ShowIn|Path|Terminal|MimeType|URL\
 |Startup(Notify|WMClass)|\
 # eventsrc-specific:\
 |default_presentation\
)

/*.fvwm|*.fvwmrc|*.fvwm2rc
i=fvwm2

/*.pas
i=pascal

/*.t2t
i=txt2tags

# OCaml mode, by Raphael Geissert <atomo64@gmail.com>
/*.mli|*.ml
i=ocaml

# Haskell mode, by Raphael Geissert <atomo64@gmail.com>
/*.hs
i=haskell

# PlantUML mode, by Serge Vakulenko (serge@vak.ru)
/*.uml|/-\*- *PlatUML *-\*-
c1,2=([^[:alnum:]_]|^)(@startuml|@enduml|hide|skinparam|left|right|header|endheader\
|footer|endfooter|participant|end|box|activate|deactivate|as|footbox|note\
)([^[:alnum:]_]|$)
c2=,|->|-->|==|:
c3=^[ \t]*'.*

# Dot mode, by Serge Vakulenko (serge@vak.ru)
/*.dot
c1,2=([^[:alnum:]_]|^)(digraph|size|margin|layout|node|edge|label\
|fillcolor|arrowhead|arrowtail|dir|both|weight|shape|height|width\
|style|fontsize|color)([^[:alnum:]_]|$)
c2=;|}|{|\[|\]|=|->
c3=#.*$
c4="[^"]*"
c5=[0-9][.0-9]*

# Manifest files, by Serge Vakulenko (serge@vak.ru)
/*.manifest
c1,2=([^[:alnum:]_]|^)(default|owner|group|dirmode|filemode|dir\
|file|mode|link|target|symlink|cdev|bdev|major|minor\
)([^[:alnum:]_]|$)
c2==
c3=^[ \t]*#.*

# micro-BESM trace files, by Serge Vakulenko <vak@cronyx.ru>
/output*.trace
c2=\*\*\*.*$
c5=;.*$
c5=--.*$
c3= Write .*$
c1= Read .*$
c2= Memory .*$
c2,2=([^[:alnum:]_]|^)(jz|cjs|jmap|cjp|push|jsrp|cjv|jrp|rfct|rpct\
|crtn|cjpp|ldct|loop|cont|twb\
)([^[:alnum:]_]|$)
c5=\) ..... .....:.*$

# OVPsim trace files, by Serge Vakulenko <vak@cronyx.ru>
/*.log|log|log-*|*.trace
c5=!!!.*$
c4=.* ignored by grmPlayer
c3=----#.*$
c5=--.*$
c3=#.*$
#c2=:|\$|->|=
#c2,1=^(\[)[^\]]+\]
c2=^Info.*$
c2=^Warning.*$
c2=^Alias.*$
c3=^.* Write .*$
c3=^.* Read .*$
c3=^.*\) .* = .*$
c4=^.*User\) - [0-9a-f]+ [0-9a-f]+ [0-9a-f]: [0-9a-f]+ .*$
c6=^.*_TC[1-9].*\) - [0-9a-f]+ [0-9a-f]+ [0-9a-f]: [0-9a-f]+ .*$
c1=^.*\) [0-9a-f]+ [0-9a-f]+ [0-9a-f]: [0-9a-f]+ .*$
c1=^.* [:-] [0-9a-f]+ [0-9a-f]+ [0-9a-f]: [0-9a-f]+ .*$
c1=^[0-9a-f]+:       [0-9a-f]+ .*$
c6=^replay.log.*$
c6=\t#.*$
c3=^INFO:.*$
c1=^WARNING:.*$

# Altera report files, by Serge Vakulenko <vak@cronyx.ru>
/*.rpt
c6=[+;].*$
c3=^ *Info.*$
c1=^ *Warning.*$
c5=^ *Error.*$

# MIPSsim trace files, by Serge Vakulenko <vak@cronyx.ru>
/*.mtrace|*.[bl][on]64r6|*.[bl][on]32r6
c5=\*\*\*.*$
c5=--.*$
c3=#.*$
#c2=:|\$|->|=
#c2,1=^(\[)[^\]]+\]
c2=^Info.*$
c2=^Warning.*$
c2=^Alias.*$
c3=^.*Write .*$
c3=^.*Read .*$
c6=^replay.log.*$
c1=^[0-9a-f]+ [0-9a-f]+ [0-9a-f]: [0-9a-f]+ .*$

# Twinsim trace files, by Serge Vakulenko <vak@cronyx.ru>
/*.xtrace
c6=!!!.*$
c5=^       GRM Miscompare ::.*$
c5=^.*: GRM miscompare.*$
c5=~~*
c3=--.*$
c3=#.*$
#c2=:|\$|->|=
#c2,1=^(\[)[^\]]+\]
#c3=^.*Write .*$
#c3=^.*Read .*$
c1=^[0-9]+  +[0-9a-f]+ [0-9a-f]+ [0-9a-f]: [0-9a-f]+ .*$

# Disassembler mode, by Serge Vakulenko <vak@cronyx.ru>
/*.dis|*.disl
#c3,2=^[ \t]*(#[ \t]*(include[ \t]*<[^>\n]*>|[[:alpha:]]*))
c1,1=^[0-9a-f]+:\t[0-9a-f]+ \t.*$
c2,7=^[0-9a-f]+ <.*>:$
c3,1=/\\*([^*]|\\*[^/])*\\*/
c3,1=//.*$|/\\*([^*]|\\*[^/])*\\*/

# wiki mode, by Serge Vakulenko <vak@cronyx.ru>
/*.wiki
#c3,2=^[ \t]*(#[ \t]*(include[ \t]*<[^>\n]*>|[[:alpha:]]*))
#c1,1=^[0-9a-f]+:\t[0-9a-f]+ \t.*$
c1=\|\||\^\^
c2====*.*===*
c3=//[^/]*//
c5=\*\*[^*]*\*\*
c6=</*code>
#c2,7=^[0-9a-f]+ <.*>:$
#c3,1=/\\*([^*]|\\*[^/])*\\*/
#c3,1=//.*$|/\\*([^*]|\\*[^/])*\\*/

# Markdown mode, by Serge Vakulenko <vak@cronyx.ru>
/*.md
c1=\[[^]]*]\([^)]*\)
c5=##*.*
#c3=//[^/]*//
#c5=\*\*[^*]*\*\*
c5=```

# Spice files, by Serge Vakulenko <vak@cronyx.ru>
/*.lib|*.cir|/\* *ngspice
c3=[*;].*$
c1==
c5=^+
c1,2=([^[:alnum:]_]|^)(\.control|\.end|\.endc|\.ends|\.include|\.model|\.subckt|\.tran|pmos|nmos\
)([^[:alnum:]_]|$)

# Balsa language mode, by Serge Vakulenko
/*.balsa
c3=--.*$
c1==|:|->|<-
c4=[0-9][0-9]*
c3=\(--(?:.|\n)*?--\)
c6="[^"]+?"
c1,2=([^[:alnum:]_]|^)(active|also|and|arbitrate|array|as|begin|bits|case\
|channel|constant|continue|else|end|enumeration|forfunction|halt|if|import\
|in|input|is|let|local|log|loop|multicast|new|not|of|or|output|over|parameter\
|passive|print|procedure|pull|push|record|select|shared|signed|sizeof|sync\
|then|type|val|variable|while|xor)([^[:alnum:]_]|$)

# Vivado log mode, by Serge Vakulenko <vak@cronyx.ru>
/vivado.log
c6=^INFO.*$
c1=^WARNING.*$
c2=^ERROR.*$

# Micro-BESM trace file, by Serge Vakulenko <vak@cronyx.ru>
/*.trace
#c3=Write .*$
#c5=Read .*$
c1=Memory .*$
c1=Poll .*$
c2=\*\*\* .*$
c2=;.*$
c1=---.*$
c1,2=([^[:alnum:]_]|^)(jz|cjs|jmap|cjp|push|jsrp|cjv|jrp\
|rfct|rpct|crtn|cjpp|ldct|loop|cont|twb\
)([^[:alnum:]_]|$)
#c1=\$|->|=
c2= [[:alnum:]]+ [[:alnum:]]+: .*
#c2,1=^\[[^\]]+(\])
#c1,1=^\[([^\]]+)\]

# Micro-BESM hex file, by Serge Vakulenko <vak@cronyx.ru>
/*.hex
c3=#.*$

# Micro-BESM assembler file, by Serge Vakulenko <vak@cronyx.ru>
/*.asm
c3=^\*[^\n]*\n
c3=;[^\n]*\n
c3="([^"\\]|\\\\(.|\n))*"
c1,2=([^[:alnum:]_]|^)(name|equ|pccb|lcb|block|pcb|const\
|hex|cmd|vtm|jmp|atx|setr|tta|ttx|vlm|wtc|uta|arx|vrm|aex\
|jaeq|hlt|clrr|wmod|vjm|uts|rmod|ati|ita|asn|aou|utc|jmne\
|a\+u|utm|xta|jane|ytx|hta|aau|aeu|vtmb|bta|aei|a-u|jage\
|aeh|aax|ath|apx|aen|asna|xty|vtmf|jalt|fta|uty|atb|vtmh\
|xts|jmeq|j\+m|u1a|mtj|ntr|rte|its|xtr|uza|aox|yta|ret|end\
|stx|sti|aux|acx|anx|asx|e\+n|e-n|e\+x|e-x|a\+x|a-x|x-a|a\*x\
|a/x|avx|a/u|a-l|msn|aoy|cmon|smon|ijp|anu|j-m|aan|aon|jmlt\
|jmle|extf|clrf|qta|jagt|jale|atd|dta|utcs|yex|a\+i|a\+l\
|l-a|yox|aey|yax|jmgt|jmge|jovr|jcry|jmps|rets|uzas|u1as\
|acu|mcj|aay|aoy|aai|aoi|a-i|i-a|mpac|munp|a\*u|a\*i|a\*l\
|a\*h|a/i|a/l|a/h|nta|vtmq|nts|hts|a-h|h-a|u-a|sth|a\+h|aah\
|aoh|atq|qts|aeq|stq|aaq|aoq|bts|aeb|stb|aob|aab|atf|stf|fts\
|aaf|aef|aof|setf|semr|semw|fun\
)([^[:alnum:]_]|$)
c2=:
c1=+|-|>>|<<|&|\||\(|\)|\*
c6,2=(hex *)([0-9a-fA-F ]*)
c6,2=(=h)([0-9a-fA-F ]*)
c6,2=([^[:alnum:]а-я_*/]|^)([0-9][0-9]*)
c4=@[0-9a-fA-F ]*

# Micro-BESM microcode files, by Serge Vakulenko <vak@cronyx.ru>
/*.src|*.mak
c4=[*].*$
c3=[;].*$
c2=:|,|=
c1,2=([^[:alnum:]_]|^)(FLIST|СНЕСК|MACRO|PROG|EXTERN|END|ENTRY|EXTERNAL\
|FIELD|EQU|CONST|val|variable|while|xor)([^[:alnum:]_]|$)
c6=[A-ZА-Ъ0-9/*]*:
c5=%[^%]*%
c5=^>

# Fortran files, by Serge Vakulenko <vak@cronyx.ru>
/*.f|*.b6
c3=^[*cCсС].*$
c1==|\(|\)|,|/|\$
c2='[^']+?'
c1,2=([^[:alnum:]_]|^)(subroutine|common|dimension|data|integer|if|call|return|goto\
|end|do|continue|print|format\
)([^[:alnum:]_]|$)
c5=[0-9][0-9]*[b]*

# Scheme files, by Serge Vakulenko
/*.scm|*.abs
c3=;.*$
c1=\(|\)|;|`|\|\[|]|{|}
c6="[^"]+?"
c1,2=([^[:alnum:]_]|^)(\
access|and|begin|bkpt|case|cond|cons-stream|declare|default-object?|define\
|define-integrable|define-macro|define-structure|define-syntax|delay|do\
|fluid-let|if|in-package|lambda|let|let\*|let-syntax|letrec|local-declare\
|macro|make-environment|named-lambda|or|quasiquote|quote|scode-quote|sequence\
|set!|the-environment|unassigned?|using-syntax\
)([^[:alnum:]_]|$)
c5,2=([^[:alnum:]_]|^)([0-9][0-9]*)

# ebnf2ps BNF files, by Serge Vakulenko <vak@cronyx.ru>
/*.bnf
#c5=\*\*\*.*$
#c5=--.*$
c6=#TODO.*$
c3=#.*$
#c2=:|\$|->|=
#c2,1=^(\[)[^\]]+\]
c5="[^"]*"
c1={|}|\||/|;|=|\[|\]|\(|\)|+|Identifier
